/*
 * This file is generated by jOOQ.
 */
package dualsoft.vf.jooq.model.tables;


import dualsoft.vf.jooq.model.Keys;
import dualsoft.vf.jooq.model.Vf;
import dualsoft.vf.jooq.model.tables.records.VfOddsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VfOdds extends TableImpl<VfOddsRecord> {

    private static final long serialVersionUID = -1573757706;

    /**
     * The reference instance of <code>VF.vf_odds</code>
     */
    public static final VfOdds VF_ODDS = new VfOdds();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VfOddsRecord> getRecordType() {
        return VfOddsRecord.class;
    }

    /**
     * The column <code>VF.vf_odds.id</code>.
     */
    public final TableField<VfOddsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('vf_odds_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>VF.vf_odds.match_id</code>.
     */
    public final TableField<VfOddsRecord, Integer> MATCH_ID = createField(DSL.name("match_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VF.vf_odds.odd_type</code>.
     */
    public final TableField<VfOddsRecord, String> ODD_TYPE = createField(DSL.name("odd_type"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>VF.vf_odds.odd_value</code>.
     */
    public final TableField<VfOddsRecord, BigDecimal> ODD_VALUE = createField(DSL.name("odd_value"), org.jooq.impl.SQLDataType.NUMERIC(5, 2), this, "");

    /**
     * Create a <code>VF.vf_odds</code> table reference
     */
    public VfOdds() {
        this(DSL.name("vf_odds"), null);
    }

    /**
     * Create an aliased <code>VF.vf_odds</code> table reference
     */
    public VfOdds(String alias) {
        this(DSL.name(alias), VF_ODDS);
    }

    /**
     * Create an aliased <code>VF.vf_odds</code> table reference
     */
    public VfOdds(Name alias) {
        this(alias, VF_ODDS);
    }

    private VfOdds(Name alias, Table<VfOddsRecord> aliased) {
        this(alias, aliased, null);
    }

    private VfOdds(Name alias, Table<VfOddsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> VfOdds(Table<O> child, ForeignKey<O, VfOddsRecord> key) {
        super(child, key, VF_ODDS);
    }

    @Override
    public Schema getSchema() {
        return Vf.VF;
    }

    @Override
    public Identity<VfOddsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VF_ODDS;
    }

    @Override
    public UniqueKey<VfOddsRecord> getPrimaryKey() {
        return Keys.ODDS_PK;
    }

    @Override
    public List<UniqueKey<VfOddsRecord>> getKeys() {
        return Arrays.<UniqueKey<VfOddsRecord>>asList(Keys.ODDS_PK, Keys.ODDS_UK);
    }

    @Override
    public List<ForeignKey<VfOddsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VfOddsRecord, ?>>asList(Keys.VF_ODDS__ODDS_MATCH_FK);
    }

    public VfMatch vfMatch() {
        return new VfMatch(this, Keys.VF_ODDS__ODDS_MATCH_FK);
    }

    @Override
    public VfOdds as(String alias) {
        return new VfOdds(DSL.name(alias), this);
    }

    @Override
    public VfOdds as(Name alias) {
        return new VfOdds(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VfOdds rename(String name) {
        return new VfOdds(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VfOdds rename(Name name) {
        return new VfOdds(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, BigDecimal> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
