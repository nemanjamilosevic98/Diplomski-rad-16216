/*
 * This file is generated by jOOQ.
 */
package dualsoft.vf.jooq.model.tables;


import dualsoft.vf.jooq.model.Keys;
import dualsoft.vf.jooq.model.Vf;
import dualsoft.vf.jooq.model.tables.records.VfLeagueRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VfLeague extends TableImpl<VfLeagueRecord> {

    private static final long serialVersionUID = -1079368622;

    /**
     * The reference instance of <code>VF.vf_league</code>
     */
    public static final VfLeague VF_LEAGUE = new VfLeague();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VfLeagueRecord> getRecordType() {
        return VfLeagueRecord.class;
    }

    /**
     * The column <code>VF.vf_league.id</code>.
     */
    public final TableField<VfLeagueRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('vf_league_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>VF.vf_league.name</code>.
     */
    public final TableField<VfLeagueRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>VF.vf_league.sport</code>.
     */
    public final TableField<VfLeagueRecord, String> SPORT = createField(DSL.name("sport"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * Create a <code>VF.vf_league</code> table reference
     */
    public VfLeague() {
        this(DSL.name("vf_league"), null);
    }

    /**
     * Create an aliased <code>VF.vf_league</code> table reference
     */
    public VfLeague(String alias) {
        this(DSL.name(alias), VF_LEAGUE);
    }

    /**
     * Create an aliased <code>VF.vf_league</code> table reference
     */
    public VfLeague(Name alias) {
        this(alias, VF_LEAGUE);
    }

    private VfLeague(Name alias, Table<VfLeagueRecord> aliased) {
        this(alias, aliased, null);
    }

    private VfLeague(Name alias, Table<VfLeagueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> VfLeague(Table<O> child, ForeignKey<O, VfLeagueRecord> key) {
        super(child, key, VF_LEAGUE);
    }

    @Override
    public Schema getSchema() {
        return Vf.VF;
    }

    @Override
    public Identity<VfLeagueRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VF_LEAGUE;
    }

    @Override
    public UniqueKey<VfLeagueRecord> getPrimaryKey() {
        return Keys.LEAGUE_PK;
    }

    @Override
    public List<UniqueKey<VfLeagueRecord>> getKeys() {
        return Arrays.<UniqueKey<VfLeagueRecord>>asList(Keys.LEAGUE_PK);
    }

    @Override
    public List<ForeignKey<VfLeagueRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VfLeagueRecord, ?>>asList(Keys.VF_LEAGUE__LEAGUE_SPORT_FK);
    }

    public VfSport vfSport() {
        return new VfSport(this, Keys.VF_LEAGUE__LEAGUE_SPORT_FK);
    }

    @Override
    public VfLeague as(String alias) {
        return new VfLeague(DSL.name(alias), this);
    }

    @Override
    public VfLeague as(Name alias) {
        return new VfLeague(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VfLeague rename(String name) {
        return new VfLeague(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VfLeague rename(Name name) {
        return new VfLeague(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
