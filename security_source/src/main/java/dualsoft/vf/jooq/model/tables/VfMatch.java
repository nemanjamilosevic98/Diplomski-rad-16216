/*
 * This file is generated by jOOQ.
 */
package dualsoft.vf.jooq.model.tables;


import dualsoft.vf.jooq.model.Keys;
import dualsoft.vf.jooq.model.Vf;
import dualsoft.vf.jooq.model.tables.records.VfMatchRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VfMatch extends TableImpl<VfMatchRecord> {

    private static final long serialVersionUID = -1245682359;

    /**
     * The reference instance of <code>VF.vf_match</code>
     */
    public static final VfMatch VF_MATCH = new VfMatch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VfMatchRecord> getRecordType() {
        return VfMatchRecord.class;
    }

    /**
     * The column <code>VF.vf_match.id</code>.
     */
    public final TableField<VfMatchRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('vf_match_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>VF.vf_match.round_id</code>.
     */
    public final TableField<VfMatchRecord, Integer> ROUND_ID = createField(DSL.name("round_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VF.vf_match.season_id</code>.
     */
    public final TableField<VfMatchRecord, Integer> SEASON_ID = createField(DSL.name("season_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VF.vf_match.kickoff_time</code>.
     */
    public final TableField<VfMatchRecord, LocalDateTime> KICKOFF_TIME = createField(DSL.name("kickoff_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>VF.vf_match.team_home_id</code>.
     */
    public final TableField<VfMatchRecord, Integer> TEAM_HOME_ID = createField(DSL.name("team_home_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VF.vf_match.team_away_id</code>.
     */
    public final TableField<VfMatchRecord, Integer> TEAM_AWAY_ID = createField(DSL.name("team_away_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VF.vf_match.home_goals</code>.
     */
    public final TableField<VfMatchRecord, Integer> HOME_GOALS = createField(DSL.name("home_goals"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>VF.vf_match.away_goals</code>.
     */
    public final TableField<VfMatchRecord, Integer> AWAY_GOALS = createField(DSL.name("away_goals"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>VF.vf_match</code> table reference
     */
    public VfMatch() {
        this(DSL.name("vf_match"), null);
    }

    /**
     * Create an aliased <code>VF.vf_match</code> table reference
     */
    public VfMatch(String alias) {
        this(DSL.name(alias), VF_MATCH);
    }

    /**
     * Create an aliased <code>VF.vf_match</code> table reference
     */
    public VfMatch(Name alias) {
        this(alias, VF_MATCH);
    }

    private VfMatch(Name alias, Table<VfMatchRecord> aliased) {
        this(alias, aliased, null);
    }

    private VfMatch(Name alias, Table<VfMatchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> VfMatch(Table<O> child, ForeignKey<O, VfMatchRecord> key) {
        super(child, key, VF_MATCH);
    }

    @Override
    public Schema getSchema() {
        return Vf.VF;
    }

    @Override
    public Identity<VfMatchRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VF_MATCH;
    }

    @Override
    public UniqueKey<VfMatchRecord> getPrimaryKey() {
        return Keys.MATCH_PK;
    }

    @Override
    public List<UniqueKey<VfMatchRecord>> getKeys() {
        return Arrays.<UniqueKey<VfMatchRecord>>asList(Keys.MATCH_PK, Keys.MATCH_UK);
    }

    @Override
    public List<ForeignKey<VfMatchRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VfMatchRecord, ?>>asList(Keys.VF_MATCH__MATCH_ROUND_FK, Keys.VF_MATCH__MATCH_TEAM_HOME_FK, Keys.VF_MATCH__MATCH_TEAM_AWAY_FK);
    }

    public VfRound vfRound() {
        return new VfRound(this, Keys.VF_MATCH__MATCH_ROUND_FK);
    }

    public VfTeam matchTeamHomeFk() {
        return new VfTeam(this, Keys.VF_MATCH__MATCH_TEAM_HOME_FK);
    }

    public VfTeam matchTeamAwayFk() {
        return new VfTeam(this, Keys.VF_MATCH__MATCH_TEAM_AWAY_FK);
    }

    @Override
    public List<Check<VfMatchRecord>> getChecks() {
        return Arrays.<Check<VfMatchRecord>>asList(
              Internal.createCheck(this, DSL.name("match_check"), "((team_home_id <> team_away_id))", true)
        );
    }

    @Override
    public VfMatch as(String alias) {
        return new VfMatch(DSL.name(alias), this);
    }

    @Override
    public VfMatch as(Name alias) {
        return new VfMatch(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VfMatch rename(String name) {
        return new VfMatch(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VfMatch rename(Name name) {
        return new VfMatch(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, LocalDateTime, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
