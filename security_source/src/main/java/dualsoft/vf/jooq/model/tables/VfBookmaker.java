/*
 * This file is generated by jOOQ.
 */
package dualsoft.vf.jooq.model.tables;


import dualsoft.vf.jooq.model.Keys;
import dualsoft.vf.jooq.model.Vf;
import dualsoft.vf.jooq.model.tables.records.VfBookmakerRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VfBookmaker extends TableImpl<VfBookmakerRecord> {

    private static final long serialVersionUID = -522129017;

    /**
     * The reference instance of <code>VF.vf_bookmaker</code>
     */
    public static final VfBookmaker VF_BOOKMAKER = new VfBookmaker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VfBookmakerRecord> getRecordType() {
        return VfBookmakerRecord.class;
    }

    /**
     * The column <code>VF.vf_bookmaker.id</code>.
     */
    public final TableField<VfBookmakerRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('vf_bookmaker_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>VF.vf_bookmaker.username</code>.
     */
    public final TableField<VfBookmakerRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>VF.vf_bookmaker.password</code>.
     */
    public final TableField<VfBookmakerRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>VF.vf_bookmaker.first_name</code>.
     */
    public final TableField<VfBookmakerRecord, String> FIRST_NAME = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>VF.vf_bookmaker.last_name</code>.
     */
    public final TableField<VfBookmakerRecord, String> LAST_NAME = createField(DSL.name("last_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>VF.vf_bookmaker.email</code>.
     */
    public final TableField<VfBookmakerRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>VF.vf_bookmaker.phone</code>.
     */
    public final TableField<VfBookmakerRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>VF.vf_bookmaker</code> table reference
     */
    public VfBookmaker() {
        this(DSL.name("vf_bookmaker"), null);
    }

    /**
     * Create an aliased <code>VF.vf_bookmaker</code> table reference
     */
    public VfBookmaker(String alias) {
        this(DSL.name(alias), VF_BOOKMAKER);
    }

    /**
     * Create an aliased <code>VF.vf_bookmaker</code> table reference
     */
    public VfBookmaker(Name alias) {
        this(alias, VF_BOOKMAKER);
    }

    private VfBookmaker(Name alias, Table<VfBookmakerRecord> aliased) {
        this(alias, aliased, null);
    }

    private VfBookmaker(Name alias, Table<VfBookmakerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> VfBookmaker(Table<O> child, ForeignKey<O, VfBookmakerRecord> key) {
        super(child, key, VF_BOOKMAKER);
    }

    @Override
    public Schema getSchema() {
        return Vf.VF;
    }

    @Override
    public Identity<VfBookmakerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VF_BOOKMAKER;
    }

    @Override
    public UniqueKey<VfBookmakerRecord> getPrimaryKey() {
        return Keys.BOOKMAKER_PK;
    }

    @Override
    public List<UniqueKey<VfBookmakerRecord>> getKeys() {
        return Arrays.<UniqueKey<VfBookmakerRecord>>asList(Keys.BOOKMAKER_PK, Keys.BOOKMAKER_UK, Keys.BOOKMAKER_EMAIL_UK);
    }

    @Override
    public VfBookmaker as(String alias) {
        return new VfBookmaker(DSL.name(alias), this);
    }

    @Override
    public VfBookmaker as(Name alias) {
        return new VfBookmaker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VfBookmaker rename(String name) {
        return new VfBookmaker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VfBookmaker rename(Name name) {
        return new VfBookmaker(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
