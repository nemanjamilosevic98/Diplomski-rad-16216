/*
 * This file is generated by jOOQ.
 */
package dualsoft.vf.jooq.model.tables;


import dualsoft.vf.jooq.model.Keys;
import dualsoft.vf.jooq.model.Vf;
import dualsoft.vf.jooq.model.tables.records.VfSportRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VfSport extends TableImpl<VfSportRecord> {

    private static final long serialVersionUID = -515857247;

    /**
     * The reference instance of <code>VF.vf_sport</code>
     */
    public static final VfSport VF_SPORT = new VfSport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VfSportRecord> getRecordType() {
        return VfSportRecord.class;
    }

    /**
     * The column <code>VF.vf_sport.code</code>.
     */
    public final TableField<VfSportRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>VF.vf_sport.name</code>.
     */
    public final TableField<VfSportRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>VF.vf_sport.halftime_duration</code>.
     */
    public final TableField<VfSportRecord, Integer> HALFTIME_DURATION = createField(DSL.name("halftime_duration"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>VF.vf_sport.period_duration</code>.
     */
    public final TableField<VfSportRecord, Integer> PERIOD_DURATION = createField(DSL.name("period_duration"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>VF.vf_sport</code> table reference
     */
    public VfSport() {
        this(DSL.name("vf_sport"), null);
    }

    /**
     * Create an aliased <code>VF.vf_sport</code> table reference
     */
    public VfSport(String alias) {
        this(DSL.name(alias), VF_SPORT);
    }

    /**
     * Create an aliased <code>VF.vf_sport</code> table reference
     */
    public VfSport(Name alias) {
        this(alias, VF_SPORT);
    }

    private VfSport(Name alias, Table<VfSportRecord> aliased) {
        this(alias, aliased, null);
    }

    private VfSport(Name alias, Table<VfSportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> VfSport(Table<O> child, ForeignKey<O, VfSportRecord> key) {
        super(child, key, VF_SPORT);
    }

    @Override
    public Schema getSchema() {
        return Vf.VF;
    }

    @Override
    public UniqueKey<VfSportRecord> getPrimaryKey() {
        return Keys.SPORT_PK;
    }

    @Override
    public List<UniqueKey<VfSportRecord>> getKeys() {
        return Arrays.<UniqueKey<VfSportRecord>>asList(Keys.SPORT_PK);
    }

    @Override
    public VfSport as(String alias) {
        return new VfSport(DSL.name(alias), this);
    }

    @Override
    public VfSport as(Name alias) {
        return new VfSport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VfSport rename(String name) {
        return new VfSport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VfSport rename(Name name) {
        return new VfSport(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
